Section 9: Constructors of whole classes and parent classes
*Question: Which classes are aggregates of other classes? Checking all constructors of whole classes if they initialize for their parts?
Answer:
- CompactDisc
    Aggregate of: Track
- Store and Cart
    Aggregate of: Media (which includes Book, DigitalVideoDisc, and CompactDisc)

Section 12: Sort media in the cart
Suppose we are taking this Comparable interface approach.
*Question: What class should implement the Comparable interface?
Answer: The Media class should implement the Comparable interface, as it is the base class for sorting different types of media (like DigitalVideoDisc, CompactDisc, etc.) in a consistent way.

*Question: In those classes, how should you implement the compareTo() method be to reflect the ordering that we want?
Answer: In the Media class, implement compareTo() to compare media items based on the title and cost. For example:
@Override
public int compareTo(Media other) {
    int titleComparison = this.title.compareTo(other.title);
    if (titleComparison != 0) return titleComparison;
    return Float.compare(this.cost, other.cost);
}

*Question: Can we have two ordering rules of the item (by title then cost and by cost then title) if we use this Comparable interface approach?
Answer: Yes, you can use the Comparable interface for one ordering rule (e.g., by title then cost) and implement a separate Comparator interface for the other rule (e.g., by cost then title), allowing for multiple ordering rules.

*Question: Suppose the DVDs has a different ordering rule from the other media types, that is by title, then decreasing length, then cost. How would you modify your code to allow this?
In the DigitalVideoDisc class, override the compareTo() method to reflect this specific ordering rule:
@Override
public int compareTo(Media other) {
    if (other instanceof DigitalVideoDisc) {
        DigitalVideoDisc otherDVD = (DigitalVideoDisc) other;
        int titleComparison = this.title.compareTo(otherDVD.title);
        if (titleComparison != 0) return titleComparison;
        int lengthComparison = Integer.compare(otherDVD.length, this.length); // Decreasing length
        if (lengthComparison != 0) return lengthComparison;
        return Float.compare(this.cost, otherDVD.cost);
    }
    return super.compareTo(other); // Use default compare for other media types
}

