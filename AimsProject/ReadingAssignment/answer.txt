Section 2.1: Overloading by differing types of parameters
*Question: What do you prefer between passing an array parameter and passing an arbitrary number of arguments for DVDs?
I would prefer the method that allows passing an arbitrary number of arguments (addDigitalVideoDisc(DigitalVideoDisc... dvds)) because it is more flexible. This approach does not require creating an array beforehand and allows direct addition of multiple DVDs in a single method call.

Section 3: Passing parameters in Java
*Question: Is Java a pass-by-value or pass-by-reference programming language?
Java is strictly pass-by-value. When passing primitive types to a method, their values are copied. For objects, the reference to the object is passed by value, meaning the method receives a copy of the reference, not the actual object itself.

*Question: Why do the titles of the two objects remain unchanged after calling swap(jungleDVD, cinderellaDVD)?
The swap method works with copies of the references. Changing these references inside the method does not affect the original references in the calling method.

*Question: Why does the title of jungleDVD change after calling changeTitle(jungleDVD, cinderellaDVD.getTitle())?
The reference copy points to the same object as the original reference. Modifying the state of the object via this reference affects the original object, as they both refer to the same memory location.

Section 6: Cart class enhancements
*Question: What should be the return type of the toString() method in the DigitalVideoDisc class?
The toString() method should return a String. This method provides a textual representation of the DigitalVideoDisc object, including its details such as title, category, director, length, and price.